# -*- coding: utf-8 -*-
"""DMLinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_YBkPva8LXs8dghQ2SoVy4pNsupJc2i
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn import preprocessing, tree
from sklearn import metrics
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score
import numpy as np

data = pd.read_csv('/content/tvmarketing.csv')

#consider sales based on 'TV' marketing budget.

data.describe

data.head()

data.isnull().sum()

data.shape

data.info()

X = data['TV']

y = data['Sales']

X.head()

y.head()

# Linear Regression = y = mx + c

data.describe

meanofx = sum(X) / len(X)
meanofy = sum(y) / len(y)

print(meanofx)

print(meanofy)

num = 0
den = 0

for i in range(len(X)):
    num += (X[i] - meanofx) * (y[i] - meanofy)
    den += (X[i] - meanofx) ** 2

m = num / den
c = meanofy - m  * meanofx

x_prediction = 38.2
y_prediction = m * x_prediction + c

print(y_prediction)

print("Slope (m):", m)
print("Intercept (c):", c)
print("Predicted value for x =", x_prediction, "is y =", y_prediction)

import matplotlib.pyplot as plt
plt.scatter(X, y, label="Data Points")

m, b = np.polyfit(X, y, 1)

# Add the regression line to the scatterplot
plt.plot(X, m * X + b)

# Show the plot
plt.show()