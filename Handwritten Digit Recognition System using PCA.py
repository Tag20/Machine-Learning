# -*- coding: utf-8 -*-
"""MLOAExp2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E7GbFJi2JT6Cdvbu-WJj6e8mbZAZilqb
"""

#C115
#Tanish Vaidya
#MLOA Experiment 2

import numpy as np
import pandas as pd
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn import metrics
from matplotlib import pyplot as plt
from sklearn.decomposition import PCA

def train_model(model,params={}):
  grid=GridSearchCV(model,param_grid=params,n_jobs=-1,refit=True,cv=3,verbose=1)
  grid.fit(x_train,y_train)
  return grid

def report(model):
  print(model.best_params_)
  preds=model.predict(x_test)
  print(metrics.accuracy_score(y_test,preds))
  cm=metrics.confusion_matrix(y_test,preds)
  print(cm)
  cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = model.classes_)
  cm_display.plot()
  plt.show()
  print(metrics.classification_report(y_test,preds))

df = pd.read_csv('/content/train.csv')

df

df = df.fillna(0)

x = df.iloc[:,1:]

y = df['label']

x

y

label = []
image = []
for i in range(16):
    label.append(df.iloc()[i][0])
    image.append(df.iloc()[i][1:].to_numpy().reshape(28, 28))

_, axes = plt.subplots(nrows=4, ncols=4, figsize=(10, 5))
for ax, image, label1 in zip(axes.flatten(), image, label):
    ax.set_axis_off()
    ax.imshow(image, interpolation="nearest")
    ax.set_title("Value: %i" % label1)
plt.tight_layout()
plt.subplots_adjust(top=1)

pca = PCA(n_components=300)
pca.fit(df)

explained_variance = pca.explained_variance_ratio_ * 100
cumsum = np.cumsum(explained_variance)
cumsum = cumsum[:300]
explained_variance = explained_variance[:300]

plt.figure(figsize=(28,28))
plt.bar(range(1, 301), explained_variance, align = 'center')
plt.step(range(1, 301), explained_variance, where = 'mid')

plt.xticks(range(1, 300, 10))
plt.legend(loc='best')
plt.tight_layout()

from sklearn.neighbors import KNeighborsClassifier

knn=train_model(KNeighborsClassifier(),{'n_neighbors':[3,5,7,10]})
report(knn)