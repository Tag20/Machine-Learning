# -*- coding: utf-8 -*-
"""Algomerative.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zo2mnPdYJ_QfpCooUXWU7P19Gq0877WL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
import seaborn as sns

from google.colab import files

uploaded = files.upload()

data = pd.read_csv('Mall_Customers.csv')
data.head()

data.describe

data.head()

data.isnull().sum()

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()

data['Gender'] = label_encoder.fit_transform(data['Gender'])
data.head()

data.head()

data.tail()

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage ='average')

y_hc = hc.fit_predict(data)
y_hc

data['cluster'] = pd.DataFrame(y_hc)

X = data.iloc[:, [3,4]].values
plt.scatter(X[y_hc==0, 0], X[y_hc==0, 1], s=100, c='red', label ='Cluster 1')
plt.scatter(X[y_hc==1, 0], X[y_hc==1, 1], s=100, c='blue', label ='Cluster 2')
plt.scatter(X[y_hc==2, 0], X[y_hc==2, 1], s=100, c='green', label ='Cluster 3')
plt.scatter(X[y_hc==3, 0], X[y_hc==3, 1], s=100, c='purple', label ='Cluster 4')
plt.scatter(X[y_hc==4, 0], X[y_hc==4, 1], s=100, c='orange', label ='Cluster 5')
plt.title('Clusters of Customers (Hierarchical Clustering Model)')
plt.xlabel('Annual Income(k$)')
plt.ylabel('Spending Score(1-100)')
plt.show()

methods = ['single', 'complete', 'average', 'ward']
distances = ['euclidean', 'cityblock', 'cosine']

plt.figure(figsize=(15, 10))

for i, method in enumerate(methods):
    for j, distance in enumerate(distances):
        plt.subplot(4, 3, i * 3 + j + 1)

        if method == 'ward' and distance != 'euclidean':
            continue

        Z = linkage(data, method=method, metric=distance)

        dendrogram(Z)

        plt.title(f'Method: {method.capitalize()}, Distance: {distance.capitalize()}')
        plt.xticks([])

plt.tight_layout()
plt.show()

chosen_method = 'ward'
chosen_distance = 'euclidean'

Z = linkage(data, method=chosen_method, metric=chosen_distance)

threshold = 2.5

labels = fcluster(Z, threshold, criterion='distance')
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
plt.title(f'Hierarchical Clustering with Method: {chosen_method.capitalize()}, Distance: {chosen_distance.capitalize()}')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

outlier_indices = np.where(labels == 0)[0]

X_cleaned = np.delete(X, outlier_indices, axis=0)